//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.60310.0
// 
namespace atomic.rss.sl4.navigable.FeedsManager {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FeedsManager.IFeedsManager")]
    public interface IFeedsManager {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFeedsManager/LoadArticles", ReplyAction="http://tempuri.org/IFeedsManager/LoadArticlesResponse")]
        System.IAsyncResult BeginLoadArticles(System.AsyncCallback callback, object asyncState);
        
        void EndLoadArticles(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFeedsManager/AddChannels", ReplyAction="http://tempuri.org/IFeedsManager/AddChannelsResponse")]
        System.IAsyncResult BeginAddChannels(string user, string channels, System.AsyncCallback callback, object asyncState);
        
        void EndAddChannels(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFeedsManager/RemoveChannelsFromUser", ReplyAction="http://tempuri.org/IFeedsManager/RemoveChannelsFromUserResponse")]
        System.IAsyncResult BeginRemoveChannelsFromUser(string user, int id_channels, System.AsyncCallback callback, object asyncState);
        
        void EndRemoveChannelsFromUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFeedsManager/SetArticlesReadForUser", ReplyAction="http://tempuri.org/IFeedsManager/SetArticlesReadForUserResponse")]
        System.IAsyncResult BeginSetArticlesReadForUser(int id_article, string user, System.AsyncCallback callback, object asyncState);
        
        void EndSetArticlesReadForUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFeedsManager/GetUserChannels", ReplyAction="http://tempuri.org/IFeedsManager/GetUserChannelsResponse")]
        System.IAsyncResult BeginGetUserChannels(string user, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<string> EndGetUserChannels(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFeedsManagerChannel : atomic.rss.sl4.navigable.FeedsManager.IFeedsManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserChannelsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserChannelsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FeedsManagerClient : System.ServiceModel.ClientBase<atomic.rss.sl4.navigable.FeedsManager.IFeedsManager>, atomic.rss.sl4.navigable.FeedsManager.IFeedsManager {
        
        private BeginOperationDelegate onBeginLoadArticlesDelegate;
        
        private EndOperationDelegate onEndLoadArticlesDelegate;
        
        private System.Threading.SendOrPostCallback onLoadArticlesCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddChannelsDelegate;
        
        private EndOperationDelegate onEndAddChannelsDelegate;
        
        private System.Threading.SendOrPostCallback onAddChannelsCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveChannelsFromUserDelegate;
        
        private EndOperationDelegate onEndRemoveChannelsFromUserDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveChannelsFromUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetArticlesReadForUserDelegate;
        
        private EndOperationDelegate onEndSetArticlesReadForUserDelegate;
        
        private System.Threading.SendOrPostCallback onSetArticlesReadForUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserChannelsDelegate;
        
        private EndOperationDelegate onEndGetUserChannelsDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserChannelsCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public FeedsManagerClient() {
        }
        
        public FeedsManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FeedsManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FeedsManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FeedsManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LoadArticlesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddChannelsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RemoveChannelsFromUserCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetArticlesReadForUserCompleted;
        
        public event System.EventHandler<GetUserChannelsCompletedEventArgs> GetUserChannelsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult atomic.rss.sl4.navigable.FeedsManager.IFeedsManager.BeginLoadArticles(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLoadArticles(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void atomic.rss.sl4.navigable.FeedsManager.IFeedsManager.EndLoadArticles(System.IAsyncResult result) {
            base.Channel.EndLoadArticles(result);
        }
        
        private System.IAsyncResult OnBeginLoadArticles(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((atomic.rss.sl4.navigable.FeedsManager.IFeedsManager)(this)).BeginLoadArticles(callback, asyncState);
        }
        
        private object[] OnEndLoadArticles(System.IAsyncResult result) {
            ((atomic.rss.sl4.navigable.FeedsManager.IFeedsManager)(this)).EndLoadArticles(result);
            return null;
        }
        
        private void OnLoadArticlesCompleted(object state) {
            if ((this.LoadArticlesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoadArticlesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoadArticlesAsync() {
            this.LoadArticlesAsync(null);
        }
        
        public void LoadArticlesAsync(object userState) {
            if ((this.onBeginLoadArticlesDelegate == null)) {
                this.onBeginLoadArticlesDelegate = new BeginOperationDelegate(this.OnBeginLoadArticles);
            }
            if ((this.onEndLoadArticlesDelegate == null)) {
                this.onEndLoadArticlesDelegate = new EndOperationDelegate(this.OnEndLoadArticles);
            }
            if ((this.onLoadArticlesCompletedDelegate == null)) {
                this.onLoadArticlesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoadArticlesCompleted);
            }
            base.InvokeAsync(this.onBeginLoadArticlesDelegate, null, this.onEndLoadArticlesDelegate, this.onLoadArticlesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult atomic.rss.sl4.navigable.FeedsManager.IFeedsManager.BeginAddChannels(string user, string channels, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddChannels(user, channels, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void atomic.rss.sl4.navigable.FeedsManager.IFeedsManager.EndAddChannels(System.IAsyncResult result) {
            base.Channel.EndAddChannels(result);
        }
        
        private System.IAsyncResult OnBeginAddChannels(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string user = ((string)(inValues[0]));
            string channels = ((string)(inValues[1]));
            return ((atomic.rss.sl4.navigable.FeedsManager.IFeedsManager)(this)).BeginAddChannels(user, channels, callback, asyncState);
        }
        
        private object[] OnEndAddChannels(System.IAsyncResult result) {
            ((atomic.rss.sl4.navigable.FeedsManager.IFeedsManager)(this)).EndAddChannels(result);
            return null;
        }
        
        private void OnAddChannelsCompleted(object state) {
            if ((this.AddChannelsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddChannelsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddChannelsAsync(string user, string channels) {
            this.AddChannelsAsync(user, channels, null);
        }
        
        public void AddChannelsAsync(string user, string channels, object userState) {
            if ((this.onBeginAddChannelsDelegate == null)) {
                this.onBeginAddChannelsDelegate = new BeginOperationDelegate(this.OnBeginAddChannels);
            }
            if ((this.onEndAddChannelsDelegate == null)) {
                this.onEndAddChannelsDelegate = new EndOperationDelegate(this.OnEndAddChannels);
            }
            if ((this.onAddChannelsCompletedDelegate == null)) {
                this.onAddChannelsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddChannelsCompleted);
            }
            base.InvokeAsync(this.onBeginAddChannelsDelegate, new object[] {
                        user,
                        channels}, this.onEndAddChannelsDelegate, this.onAddChannelsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult atomic.rss.sl4.navigable.FeedsManager.IFeedsManager.BeginRemoveChannelsFromUser(string user, int id_channels, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveChannelsFromUser(user, id_channels, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void atomic.rss.sl4.navigable.FeedsManager.IFeedsManager.EndRemoveChannelsFromUser(System.IAsyncResult result) {
            base.Channel.EndRemoveChannelsFromUser(result);
        }
        
        private System.IAsyncResult OnBeginRemoveChannelsFromUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string user = ((string)(inValues[0]));
            int id_channels = ((int)(inValues[1]));
            return ((atomic.rss.sl4.navigable.FeedsManager.IFeedsManager)(this)).BeginRemoveChannelsFromUser(user, id_channels, callback, asyncState);
        }
        
        private object[] OnEndRemoveChannelsFromUser(System.IAsyncResult result) {
            ((atomic.rss.sl4.navigable.FeedsManager.IFeedsManager)(this)).EndRemoveChannelsFromUser(result);
            return null;
        }
        
        private void OnRemoveChannelsFromUserCompleted(object state) {
            if ((this.RemoveChannelsFromUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveChannelsFromUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveChannelsFromUserAsync(string user, int id_channels) {
            this.RemoveChannelsFromUserAsync(user, id_channels, null);
        }
        
        public void RemoveChannelsFromUserAsync(string user, int id_channels, object userState) {
            if ((this.onBeginRemoveChannelsFromUserDelegate == null)) {
                this.onBeginRemoveChannelsFromUserDelegate = new BeginOperationDelegate(this.OnBeginRemoveChannelsFromUser);
            }
            if ((this.onEndRemoveChannelsFromUserDelegate == null)) {
                this.onEndRemoveChannelsFromUserDelegate = new EndOperationDelegate(this.OnEndRemoveChannelsFromUser);
            }
            if ((this.onRemoveChannelsFromUserCompletedDelegate == null)) {
                this.onRemoveChannelsFromUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveChannelsFromUserCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveChannelsFromUserDelegate, new object[] {
                        user,
                        id_channels}, this.onEndRemoveChannelsFromUserDelegate, this.onRemoveChannelsFromUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult atomic.rss.sl4.navigable.FeedsManager.IFeedsManager.BeginSetArticlesReadForUser(int id_article, string user, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetArticlesReadForUser(id_article, user, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void atomic.rss.sl4.navigable.FeedsManager.IFeedsManager.EndSetArticlesReadForUser(System.IAsyncResult result) {
            base.Channel.EndSetArticlesReadForUser(result);
        }
        
        private System.IAsyncResult OnBeginSetArticlesReadForUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id_article = ((int)(inValues[0]));
            string user = ((string)(inValues[1]));
            return ((atomic.rss.sl4.navigable.FeedsManager.IFeedsManager)(this)).BeginSetArticlesReadForUser(id_article, user, callback, asyncState);
        }
        
        private object[] OnEndSetArticlesReadForUser(System.IAsyncResult result) {
            ((atomic.rss.sl4.navigable.FeedsManager.IFeedsManager)(this)).EndSetArticlesReadForUser(result);
            return null;
        }
        
        private void OnSetArticlesReadForUserCompleted(object state) {
            if ((this.SetArticlesReadForUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetArticlesReadForUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetArticlesReadForUserAsync(int id_article, string user) {
            this.SetArticlesReadForUserAsync(id_article, user, null);
        }
        
        public void SetArticlesReadForUserAsync(int id_article, string user, object userState) {
            if ((this.onBeginSetArticlesReadForUserDelegate == null)) {
                this.onBeginSetArticlesReadForUserDelegate = new BeginOperationDelegate(this.OnBeginSetArticlesReadForUser);
            }
            if ((this.onEndSetArticlesReadForUserDelegate == null)) {
                this.onEndSetArticlesReadForUserDelegate = new EndOperationDelegate(this.OnEndSetArticlesReadForUser);
            }
            if ((this.onSetArticlesReadForUserCompletedDelegate == null)) {
                this.onSetArticlesReadForUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetArticlesReadForUserCompleted);
            }
            base.InvokeAsync(this.onBeginSetArticlesReadForUserDelegate, new object[] {
                        id_article,
                        user}, this.onEndSetArticlesReadForUserDelegate, this.onSetArticlesReadForUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult atomic.rss.sl4.navigable.FeedsManager.IFeedsManager.BeginGetUserChannels(string user, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserChannels(user, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<string> atomic.rss.sl4.navigable.FeedsManager.IFeedsManager.EndGetUserChannels(System.IAsyncResult result) {
            return base.Channel.EndGetUserChannels(result);
        }
        
        private System.IAsyncResult OnBeginGetUserChannels(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string user = ((string)(inValues[0]));
            return ((atomic.rss.sl4.navigable.FeedsManager.IFeedsManager)(this)).BeginGetUserChannels(user, callback, asyncState);
        }
        
        private object[] OnEndGetUserChannels(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<string> retVal = ((atomic.rss.sl4.navigable.FeedsManager.IFeedsManager)(this)).EndGetUserChannels(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserChannelsCompleted(object state) {
            if ((this.GetUserChannelsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserChannelsCompleted(this, new GetUserChannelsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserChannelsAsync(string user) {
            this.GetUserChannelsAsync(user, null);
        }
        
        public void GetUserChannelsAsync(string user, object userState) {
            if ((this.onBeginGetUserChannelsDelegate == null)) {
                this.onBeginGetUserChannelsDelegate = new BeginOperationDelegate(this.OnBeginGetUserChannels);
            }
            if ((this.onEndGetUserChannelsDelegate == null)) {
                this.onEndGetUserChannelsDelegate = new EndOperationDelegate(this.OnEndGetUserChannels);
            }
            if ((this.onGetUserChannelsCompletedDelegate == null)) {
                this.onGetUserChannelsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserChannelsCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserChannelsDelegate, new object[] {
                        user}, this.onEndGetUserChannelsDelegate, this.onGetUserChannelsCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override atomic.rss.sl4.navigable.FeedsManager.IFeedsManager CreateChannel() {
            return new FeedsManagerClientChannel(this);
        }
        
        private class FeedsManagerClientChannel : ChannelBase<atomic.rss.sl4.navigable.FeedsManager.IFeedsManager>, atomic.rss.sl4.navigable.FeedsManager.IFeedsManager {
            
            public FeedsManagerClientChannel(System.ServiceModel.ClientBase<atomic.rss.sl4.navigable.FeedsManager.IFeedsManager> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginLoadArticles(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("LoadArticles", _args, callback, asyncState);
                return _result;
            }
            
            public void EndLoadArticles(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("LoadArticles", _args, result);
            }
            
            public System.IAsyncResult BeginAddChannels(string user, string channels, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = user;
                _args[1] = channels;
                System.IAsyncResult _result = base.BeginInvoke("AddChannels", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddChannels(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddChannels", _args, result);
            }
            
            public System.IAsyncResult BeginRemoveChannelsFromUser(string user, int id_channels, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = user;
                _args[1] = id_channels;
                System.IAsyncResult _result = base.BeginInvoke("RemoveChannelsFromUser", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRemoveChannelsFromUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("RemoveChannelsFromUser", _args, result);
            }
            
            public System.IAsyncResult BeginSetArticlesReadForUser(int id_article, string user, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = id_article;
                _args[1] = user;
                System.IAsyncResult _result = base.BeginInvoke("SetArticlesReadForUser", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSetArticlesReadForUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SetArticlesReadForUser", _args, result);
            }
            
            public System.IAsyncResult BeginGetUserChannels(string user, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = user;
                System.IAsyncResult _result = base.BeginInvoke("GetUserChannels", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<string> EndGetUserChannels(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<string> _result = ((System.Collections.ObjectModel.ObservableCollection<string>)(base.EndInvoke("GetUserChannels", _args, result)));
                return _result;
            }
        }
    }
}
